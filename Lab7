// Universidad del Valle
// Digital 2
// Ana Gramajo
// Controla un circuito mediante comunicación serial. Realizar una lectura ADC o enciende un led seleccionado una cantidad de tiempo indicada. 

// Librerías
#include <Arduino.h>

// Se definen los leds
#define ledv 18
#define leda 19
#define ledr 21
// Se define el potenciómetro
#define Pot 13
// Variable para controlar el tiempo de las leds
int tiempo_ms;
int led;
// Variable que define qué debe hacer el programa
int modo = 0; // El programa inicia en el modo 0
// Variable para leer el voltaje del potenciómetro
float voltaje;
// Variables para leer el led que se debe encender y cuánto tiempo
String datos; // Recibe la cadena ingresada por el usuario 
int comaPos; // Guarda la posición de la coma

// Prototipos de función
void encenderLed(int led, int tiempo); // Función para encender el led indicado, el tiempo deseado

void setup() {
  // inicia la conexión serial
  Serial.begin(115200);
  // Configuración de pines de salida para los LEDs
  pinMode(ledr, OUTPUT);
  pinMode(ledv, OUTPUT);
  pinMode(leda, OUTPUT);
}

void loop() {

  switch (modo)
  {
  case 0: // Modo inicial, el usuario elige el modo de uso
    // Pide al usuario que elija un modo
    Serial.println("Seleccione una opción ingresando el número correspondiente. \n 1. Lectura ADC. \n 2. Controlar LEDs.");
    while (Serial.available() == 0) {
      // Espera a que el usuario haya ingresado un valor
    }
    // Lee el modo escogido
    modo = Serial.parseInt(); 
    break;
  case 1: // Modo 1: Lee el voltaje del potenciómetro
    voltaje = analogReadMilliVolts(Pot) / 1000.0; //Lee el voltaje del potenciómetro
    // Muestra el voltaje en la pantalla serial
    Serial.print("Voltaje -> ");
    Serial.println(voltaje);
    delay(1000);
    // Regresa al modo 0
    modo=0;
    break;
  case 2: // Modo 2: Enciende un led el tiempo indicado por el usuario
    Serial.println("Ingrese el LED a encender y la duración en ms (número entero), separados por coma y sin espacios. Ejemplo: 1,50");
    Serial.println("Ingrese: \n 1. Led verde. \n 2. Led amarillo. \n 3. Led rojo."); //Pide al usuario que seleccione el led a encender
    while (Serial.available() == 0) {
      // Espera a que el usuario haya ingresado un valor
    }
    // Lee la información ingresada por el usuario
    datos = Serial.readStringUntil('\n');  // Lee hasta el salto de línea
    Serial.println(datos); // Muestra lo que el usuario ingresó 
    comaPos = datos.indexOf(','); // Busca la posicicón de la coma
    if (comaPos != -1) { // Verifica la existencia de una coma
      led = datos.substring(0, comaPos).toInt(); // Guarda el led seleccionado
      tiempo_ms = datos.substring(comaPos + 1).toInt(); // Guarda el tiempo seleccionado
      if ((led!=1 && led!=2 && led!=3) || tiempo_ms==0) { // Verifica que los datos sean válidos
        Serial.println("No ingresó datos válidos. \nInténtelo de nuevo.");
        delay(1000);
        modo = 2;
      } else {
        encenderLed(led,tiempo_ms); // nFunción que enciende el led
        modo = 0; // Regresa al modo 0
      }
    } else {
      Serial.println("No ingresó los datos en el formato correcto. \nInténtelo de nuevo.");
      modo = 2; // Vuelve a pedir al usuario que ingrese los datos
      delay(1000);
    }
    break;
  default:
    Serial.println("No ingresó una opción válida.\nInténtelo de nuevo.");
    delay(1000);
    modo=0; // Regresa al modo 0
    break;
  }
}


// put function definitions here:
void encenderLed(int l, int t) {
  switch (l)
  {
  case 1:
    digitalWrite(ledv, HIGH); // Enciende el led
    vTaskDelay(t / portTICK_PERIOD_MS); // Espera el tiempo indicado
    digitalWrite(ledv, LOW); // Apaga el led
    break;
  case 2:
    digitalWrite(leda, HIGH); // Enciende el led
    vTaskDelay(t/ portTICK_PERIOD_MS); // Espera el tiempo indicado
    digitalWrite(leda, LOW); // Apaga el led
    break;
  case 3:
    digitalWrite(ledr, HIGH); // Enciende el led
    vTaskDelay(t/ portTICK_PERIOD_MS); // Espera el tiempo indicado
    digitalWrite(ledr, LOW); // Apaga el led
    break;
  default:
    break;
  }
}
